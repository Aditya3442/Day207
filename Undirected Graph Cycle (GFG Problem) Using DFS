class Solution {
    public static boolean dfs(int index , int parent , boolean[] visited , ArrayList<ArrayList<Integer>> adj) {
        visited[index] = true;
        boolean check = false;
        for(int x : adj.get(index)) {
            if(x == parent)
              continue;
            else {
                if(visited[x])
                   return true;
                else {
                    visited[x] = true;
                    check = check || dfs(x , index , visited , adj);
                }
            }
        }
        return check;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int n = adj.size();
        boolean visited[] = new boolean[n];
        
        for (int i = 0; i < n; i++) {
            if(!visited[i]) {
                 if(dfs(i , -1 , visited , adj))
                     return true;
            }
        }
        return false;
    }
}
