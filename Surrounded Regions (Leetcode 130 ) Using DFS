class Solution {
    int directions[][] = {{0 , -1} , {-1 , 0} , {0 , 1} , {1 , 0}};
    public void dfs(int i , int j , boolean[][] visited , char[][] board) {
        int m = board.length;
        int n = board[0].length;
        visited[i][j] = true;
        for(int dir[] : directions) {
            int x = i + dir[0];
            int y = j + dir[1];

            if(x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && board[x][y] == 'O') {
                dfs(x , y , visited , board);
            }
        }
    }
    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;

        boolean visited[][] = new boolean[m][n];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if((i == 0 || j == 0 || i == m - 1 || j == n - 1) && board[i][j] == 'O' && !visited[i][j]) {
                    dfs(i , j , visited , board);
                }
            }
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 'O' && !visited[i][j]) {
                    board[i][j] = 'X';
                }
            }
        }
       
    }
}
